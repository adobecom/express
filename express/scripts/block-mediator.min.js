const BlockMediator=(()=>{const n={};const a=c=>{n[c]={callbacks:[],value:undefined}};const r=c=>c in n;const c=()=>Object.keys(n);const s=c=>n[c]?.value;const t=(e,l)=>{if(!r(e)){a(e)}const o=s(e);n[e].value=l;return new Promise(c=>{const s=[];for(const t of n[e].callbacks){try{t({oldValue:o,newValue:l})}catch(c){s.push(c)}}c(s)})};const e=(c,s)=>{if(!r(c)){a(c)}const t=n[c];if(t.callbacks.includes(s))return()=>{};t.callbacks.push(s);const e=()=>{t.callbacks=t.callbacks.filter(c=>c!==s)};return e};return{hasStore:r,listStores:c,get:s,set:t,subscribe:e}})();export default BlockMediator;